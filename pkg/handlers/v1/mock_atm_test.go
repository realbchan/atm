// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/domain/atm.go

// Package mock_domain is a generated GoMock package.
package v1

import (
	context "context"
	reflect "reflect"
	time "time"

	domain "github.com/atm/pkg/domain"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockATM is a mock of ATM interface.
type MockATM struct {
	ctrl     *gomock.Controller
	recorder *MockATMMockRecorder
}

// MockATMMockRecorder is the mock recorder for MockATM.
type MockATMMockRecorder struct {
	mock *MockATM
}

// NewMockATM creates a new mock instance.
func NewMockATM(ctrl *gomock.Controller) *MockATM {
	mock := &MockATM{ctrl: ctrl}
	mock.recorder = &MockATMMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockATM) EXPECT() *MockATMMockRecorder {
	return m.recorder
}

// DepositMoney mocks base method.
func (m *MockATM) DepositMoney(ctx context.Context, token uuid.UUID, amount float64) (float64, domain.ATMError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DepositMoney", ctx, token, amount)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(domain.ATMError)
	return ret0, ret1
}

// DepositMoney indicates an expected call of DepositMoney.
func (mr *MockATMMockRecorder) DepositMoney(ctx, token, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DepositMoney", reflect.TypeOf((*MockATM)(nil).DepositMoney), ctx, token, amount)
}

// GetBalance mocks base method.
func (m *MockATM) GetBalance(ctx context.Context, token uuid.UUID) (float64, domain.ATMError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBalance", ctx, token)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(domain.ATMError)
	return ret0, ret1
}

// GetBalance indicates an expected call of GetBalance.
func (mr *MockATMMockRecorder) GetBalance(ctx, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalance", reflect.TypeOf((*MockATM)(nil).GetBalance), ctx, token)
}

// IsAuthenticated mocks base method.
func (m *MockATM) IsAuthenticated(ctx context.Context, token uuid.UUID) domain.ATMError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsAuthenticated", ctx, token)
	ret0, _ := ret[0].(domain.ATMError)
	return ret0
}

// IsAuthenticated indicates an expected call of IsAuthenticated.
func (mr *MockATMMockRecorder) IsAuthenticated(ctx, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAuthenticated", reflect.TypeOf((*MockATM)(nil).IsAuthenticated), ctx, token)
}

// Login mocks base method.
func (m *MockATM) Login(ctx context.Context, username string, pin int64) (uuid.UUID, domain.ATMError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", ctx, username, pin)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(domain.ATMError)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockATMMockRecorder) Login(ctx, username, pin interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockATM)(nil).Login), ctx, username, pin)
}

// WithdrawMoney mocks base method.
func (m *MockATM) WithdrawMoney(ctx context.Context, token uuid.UUID, amount float64) (float64, domain.ATMError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithdrawMoney", ctx, token, amount)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(domain.ATMError)
	return ret0, ret1
}

// WithdrawMoney indicates an expected call of WithdrawMoney.
func (mr *MockATMMockRecorder) WithdrawMoney(ctx, token, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithdrawMoney", reflect.TypeOf((*MockATM)(nil).WithdrawMoney), ctx, token, amount)
}

// MockATMError is a mock of ATMError interface.
type MockATMError struct {
	ctrl     *gomock.Controller
	recorder *MockATMErrorMockRecorder
}

// MockATMErrorMockRecorder is the mock recorder for MockATMError.
type MockATMErrorMockRecorder struct {
	mock *MockATMError
}

// NewMockATMError creates a new mock instance.
func NewMockATMError(ctrl *gomock.Controller) *MockATMError {
	mock := &MockATMError{ctrl: ctrl}
	mock.recorder = &MockATMErrorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockATMError) EXPECT() *MockATMErrorMockRecorder {
	return m.recorder
}

// Error mocks base method.
func (m *MockATMError) Error() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Error")
	ret0, _ := ret[0].(string)
	return ret0
}

// Error indicates an expected call of Error.
func (mr *MockATMErrorMockRecorder) Error() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockATMError)(nil).Error))
}

// IsAuthenticated mocks base method.
func (m *MockATMError) IsAuthenticated() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsAuthenticated")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsAuthenticated indicates an expected call of IsAuthenticated.
func (mr *MockATMErrorMockRecorder) IsAuthenticated() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAuthenticated", reflect.TypeOf((*MockATMError)(nil).IsAuthenticated))
}

// IsRetryable mocks base method.
func (m *MockATMError) IsRetryable() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsRetryable")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsRetryable indicates an expected call of IsRetryable.
func (mr *MockATMErrorMockRecorder) IsRetryable() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsRetryable", reflect.TypeOf((*MockATMError)(nil).IsRetryable))
}

// RetryAfter mocks base method.
func (m *MockATMError) RetryAfter() time.Duration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RetryAfter")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// RetryAfter indicates an expected call of RetryAfter.
func (mr *MockATMErrorMockRecorder) RetryAfter() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetryAfter", reflect.TypeOf((*MockATMError)(nil).RetryAfter))
}
